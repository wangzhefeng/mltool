library(DMwR)
head(algae)
dim(algae)
algae_txt = read.table("http://www.dcc.fc.up.pt/~ltorgo/DataMiningWithR/DataSets/Analysis.txt",
header = F,
dec = ".",
col_names = c("season", "size", "speed",
"mxPH", "mnO2", "Cl", "NO3", "NH4", "oPO4", "Chla",
"a1", "a2", "a3", "a4", "a5", "a6", "a7"),
na.strings = "XXXXXXX")
algae_txt
algae_txt = read.table("http://www.dcc.fc.up.pt/~ltorgo/DataMiningWithR/DataSets/Analysis.txt",
header = F,
dec = ".",
col_names = c("season", "size", "speed",
"mxPH", "mnO2", "Cl", "NO3", "NH4", "oPO4", "PO4" "Chla",
"a1", "a2", "a3", "a4", "a5", "a6", "a7"),
na.strings = "XXXXXXX")
algae_txt = read.table("http://www.dcc.fc.up.pt/~ltorgo/DataMiningWithR/DataSets/Analysis.txt",
header = F,
dec = ".",
col_names = c("season", "size", "speed",
"mxPH", "mnO2", "Cl", "NO3", "NH4", "oPO4", "PO4", "Chla",
"a1", "a2", "a3", "a4", "a5", "a6", "a7"),
na.strings = "XXXXXXX")
algae_txt = read.table("http://www.dcc.fc.up.pt/~ltorgo/DataMiningWithR/DataSets/Analysis.txt",
header = F,
dec = ".",
col.names = c("season", "size", "speed",
"mxPH", "mnO2", "Cl", "NO3", "NH4", "oPO4", "PO4", "Chla",
"a1", "a2", "a3", "a4", "a5", "a6", "a7"),
na.strings = "XXXXXXX")
algae.txt
algae_txt
View(algae_txt)
summary(algae)
install.packages("Rcpp")
install.packages("Rcpp")
summary(algae)
library(DMwR)
head(algae)
summary(algae)
library(Hmisc)
describe(algae)
hist(algae$mxPH, prob = TRUE)
# Q-Q plot of mxPH
library(car)
# Histogram plot and Normal Q-Q plot of mxPH
library(car)
par(mfrow = c(1, 2))
hist(algae$mxPH,
prob = TRUE,
xlab = "",
main = "Histogram of maximum pH value",
ylim = 0:1)
lines(density(algae$mxPH, na.rm = TRUE))
rug(jitter(algae$mxPH))
qq.plot(algae$mxPH, main = "Normal QQ plot of maximum pH")
par(mfrow = c(1, 1))
source(destribution_info.R)
getwd()
ls
ls()
# Data
setwd("E:/project/algae_predict")
source(destribution_info.R)
source("destribution_info.R")
library(car)
qqPlot(algae$mxPH, main = "Normal QQ plot of maximum pH")
source("destribution_info.R")
getwd()source("read_data.R")
# Data
setwd("E:/project/algae_predict")
print("当前工作目录为：")
getwd()
# source("read_data.R")
source("destribution_info.R")
library(sparklyr)
library(sparklyr)
install.packages('assertthat')
conn = DBI::dbConnect(odbc::odbc(),
Driver "SQL Server",
Server = "WANGZF-PC",
Database = "tinker",
UID = "tinker.wang",
PWD = "alvin123",
Port = 1433)
conn = DBI::dbConnect(odbc::odbc(),
Driver "SQL Server",
Server = "WANGZF-PC",
Database = "tinker",
UID = "tinker.wang",
PWD = "alvin123",
Port = 1433)
conn = DBI::dbConnect(odbc::odbc(),
Driver = "SQL Server",
Server = "WANGZF-PC",
Database = "tinker",
UID = "tinker.wang",
PWD = "alvin123",
Port = 1433)
library(odbc)
conn = DBI::dbConnect(odbc::odbc(), Driver = "SQL Server", Server = "WANGZF-PC",
Database = "tinker", UID = "tinker.wang", PWD = "alvin123",
Port = 1433)
boxplot(algae$oPO4, ylab = "Orthophoshate (oPO4)")
boxplot(algae$oPO4, ylab = "Orthophoshate (oPO4)")
rug(jitter(algae$oPO4), side = 2)
rug(jitter(algae$oPO4), side = 2)
boxplot(algae$oPO4, ylab = "Orthophoshate (oPO4)")
rug(jitter(algae$oPO4), side = 2)
abline(h = mean(algae$oPO4, na.rm = TRUE), lty = 2)
abline(h = mean(algae$oPO4, na.rm = TRUE), lty = 2, col = "red")
plot(algae$NH4, xlab = "")
abline(h = mean(algae$NH4, na.rm = TRUE), lty = 1)
abline(h = mean(algae$NH4, na.rm = TRUE) + sd(algae$NH4, na.rm = TRUE), lty = 2)
abline(h = median(algae$NH4, na.rm = TRUE), lty = 3)
identity(algae$NH4)
identify(algae$NH4)
clicked.lines = identify(algae$NH4)
algae[clicked.lines, ]
algae[!is.na(algae$NH4) & algae$NH4 > 19000, ]
algae[algae$NH4 > 19000, ]
library(lattice)
bwplot(size ~ a1, data = algae, ylab = "River Size", xlab = "Algal A1")
library(lattice)
bwplot(size ~ a1, data = algae, ylab = "River Size", xlab = "Algal A1")
bwplot(size ~ a1, data = algae, ylab = "River Size", xlab = "Algal A1")
library(lattice)
bwplot(size ~ a1, data = algae, ylab = "River Size", xlab = "Algal A1")
dev.off()
library(lattice)
bwplot(size ~ a1, data = algae, ylab = "River Size", xlab = "Algal A1")
library(Hmisc)
bwplot(size ~ a1, data = algae,
panel = panel.bpplot,
probs = seq(0.01, 0.49, by = 0.01),
datadendity = TRUE,
ylab = "River Size",
xlab = "Algal A1")
library(DMwR)
# Histogram plot, Density plot and Normal Q-Q plot of mxPH
# Normal Q-Q 给出了变量分位数和正态分布的理论分位数的散点图
#并给出了正态分布的95%置信区间的袋带状图
par(mfrow = c(1, 2))
hist(algae$mxPH,
prob = TRUE,
xlab = "",
main = "Histogram of maximum pH value",
ylim = 0:1)
lines(density(algae$mxPH, na.rm = TRUE))
rug(jitter(algae$mxPH))
library(car)
qqPlot(algae$mxPH, main = "Normal QQ plot of maximum pH")
par(mfrow = c(1, 1))
View(algae)
boxplot(algae$oPO4, ylab = "Orthophoshate (oPO4)")
rug(jitter(algae$oPO4), side = 2)
abline(h = mean(algae$oPO4, na.rm = TRUE), lty = 2, col = "red")
plot(algae$NH4, xlab = "")
abline(h = mean(algae$NH4, na.rm = TRUE), lty = 1)
abline(h = mean(algae$NH4, na.rm = TRUE) + sd(algae$NH4, na.rm = TRUE), lty = 2)
abline(h = median(algae$NH4, na.rm = TRUE), lty = 3)
# identify(algae$NH4)
clicked.lines = identify(algae$NH4)
algae[clicked.lines, ]
# or
algae %>% filter(NH4 > 19000)
library(tidyverse)
# or
algae %>% filter(NH4 > 19000)
algae %>% filter(is.na(NH4) & NH4 > 19000)
library(DMwR)
library(lattice)
bwplot(size ~ a1, data = algae, ylab = "River Size", xlab = "Algal A1")
bwplot(size ~ a1, data = algae,
panel = panel.bpplot,
probs = seq(0.01, 0.49, by = 0.01),
datadendity = TRUE,
ylab = "River Size",
xlab = "Algal A1")
library(Hmisc)
bwplot(size ~ a1, data = algae,
panel = panel.bpplot,
probs = seq(0.01, 0.49, by = 0.01),
datadendity = TRUE,
ylab = "River Size",
xlab = "Algal A1")
algae$mnO2
minO2 = equal.count(na.omit(algae$mnO2), number = 4, overlap = 1 / 5)
minO2
stripplot(season ~ a3|minO2, data = algae[!is.na(algae$mnO2), ])
algae[!complete.cases(algae), ]
sapply(algae, function(x) sum(is.na(x)))
nrow(algae[!complete.cases(algae), ])
# delete the rows which have miss values in algae
algae = na.omit(algae)
algae
sapply(algae, function(x) sum(is.na(x)))
apply(algae, 1, function(x) sum(is.na(x)))
apply(algae, 2, function(x) sum(is.na(x)))
manyNAs(algae, 0.2)
data(algae)
manyNAs(algae, 0.2)
algae = algae[-manyNAs(algae), ]
algae
algae[48, "mxPH"]
# impute the miss values with center values
algae[48, "mxPH"] = mean(algae$mxPH, na.rm = TRUE)
algae[48, "mxPH"]
algae[is.na(algae$Chla), "Chla"] = median(algae$Chla, na.rm = TRUE)
data(algae)
algae = algae[-manyNAs(algae), ]
algae
algae = centralrImputation(algae)
algae = centralImputation(algae)
cor(algae[, 4:18], use = "complete.obs")
symnum(cor(algae[, 4:18], use = "complete.obs"))
symnum(cor(algae[, 4:18], use = "complete.obs"))
# 通过变量之间的相关关系来填充缺失值
data(algae)
cor(algae[, 4:18], use = "complete.obs")
symnum(cor(algae[, 4:18], use = "complete.obs"))
lm(PO4 ~ oPO4, data = algae)
model = lm(PO4 ~ oPO4, data = algae)
model$coefficients
model$residuals
model$model
model
algae[28, "PO4"] = 42.897 + 1.293 * algae[28, "oPO4"]
algae[is.na(algae$PO4), "PO4"] = sapply(algae[is.na(algae$PO4), "oPO4"], fillPO4)
fillPO4 = function(oP) {
if(is.na(oP)){
return(NA)
} else {
return(42.897 + 1.293 * oP)
}
}
algae[is.na(algae$PO4), "PO4"] = sapply(algae[is.na(algae$PO4), "oPO4"], fillPO4)
#
histogram(~mxPH | season, data = algae)
#
library(lattice)
histogram(~mxPH | season, data = algae)
algae$season = factor(algae$season, levels = c("spring", "summer", "autumn", "winter"))
histogram(~mxPH | season, data = algae)
histogram(~mxPH | size, data = algae)
histogram(~mxPH | size * speed, data = algae)
stripplot(size ~ mxPH | speed, data = algae, jitter = TRUE)
# 通过探索数据行之间的相似性填补缺失值
data(algae)
algae = algae[-manyNAs(algae), ]
library(DMwR)
algae = algae[-manyNAs(algae), ]
# 通过探索数据行之间的相似性填补缺失值
data(algae)
algae = algae[-manyNAs(algae), ]
knnImputation()
knnImputation
algae = knnImputation(algae, k = 10, meth = "median")
View(algae)
# data
data(algae)
algae <- algae[-manyNAs(algae), ]
clean_algae = knnImputation(algae, k = 10)
# built the regression model
lm_a1 = lm(a1 ~ ., data = clean_algae[, 1:12])
summary(lm_a1)
anova(lm_a1)
lm2_a1 = update(lm_a1, . ~ . - season)
summary(lm2_a1)
anova(lm2_a1)
lm3_a1 = update(lm2_a1, .~. - Chal)
summary(lm3_a1)
lm3_a1 = update(lm2_a1, .~. - Chla)
summary(lm3_a1)
anova(lm2_a1, lm3_a1)
# step
final_lm = step(lm_a1)
?step
# step
final_lm_back = step(lm_a1, direction = "backward")
summary(final_lm_back)
library(rpart)
data(algae)
algae = algae[-manyNAs(algae), ]
rt_a1 = rpart(a1 ~ ., data = algae[, 1:12])
rt_a1
plot(rt_a1)
plot(rt_a1)
text(rt_a1)
prettyTree(rt_a1)
summary(rt_a1)
# jianzhi
printcp(rt_a1)
